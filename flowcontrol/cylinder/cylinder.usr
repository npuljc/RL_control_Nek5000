c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
c start time for averaging
#define tSTATSTART uparam(1)

c output frequency for statistics
#define tSTATFREQ  uparam(2)

c data extraction using interpolation
#define INTP_NMAX 86
#define INTP_NX 12
#define INTP_NY 12
#define XCINT 1.0
#define YCINT 0.5
#define ZCINT 0.0


c mesh dimensions
#define PI (4.*atan(1.))
#define XLEN 50
#define YLEN 20
#define NUMBER_ELEMENTS_X 16
#define NUMBER_ELEMENTS_Y 12

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff  = 0.
      utrans = 0.
      ! the following should be global variables

      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'  ! for nelx,nely,nelz
      include 'JETVAR'

      parameter (lt=lx1*ly1*lz1*lelv)
      common /scrns/ vort(lt,3), wo1(lt), wo2(lt)

      real x0(3)
      save x0
      data x0 /3*0/


      real    rwk(INTP_NMAX,ldim+1) ! r,s,t,dist2
      integer iwk(INTP_NMAX,3)      ! code,proc,e1
      save    rwk,iwk

      integer nint,intp_h
      save    nint,intp_h

      logical iffpts
      save    iffpts

      real xint(INTP_NMAX),yint(INTP_NMAX),zint(INTP_NMAX)
      save xint,yint,zint

      real preye(INTP_NMAX),intvx(INTP_NMAX),intvy(INTP_NMAX)
      save preye,intvx,intvy

      real detecx0,detecx1
      parameter (detecx0=0.6)
      parameter (detecx1=3.0)

      real detecy0,detecy1
      parameter (detecy0=-1.2)
      parameter (detecy1=1.2)

      n = nx1*ny1*nz1*nelv

      if (istep.eq.0) then
         call set_obj
         cdrag = 0.0
         clift = 0.0
         
         if (nid.eq.0) then
           open (223, file = 'Q.txt', status = 'old')
           read(223,*) Qnew,Qold
           close(223)
         endif
         call bcast(Qnew,sizeof(Qnew))
         call bcast(Qold,sizeof(Qnew))
      endif
      
      Qtime = dt*(istep+1)
      
      Qold = Qold + 0.1*(Qnew-Qold)


      if (nid.eq.0) then
        open(unit=599,file='Qhist.dat',position='append')
        write(599,333) Qtime,Qold
333         format(' ',2e17.9)
        close(599)
      endif

      !call estimate_strouhal

      scale = 4.  ! Cd = F/(.5 rho U^2 ) = 2*F

      if ((mod(istep,5).eq.0) .and. (istep > 1)) then

       call torque_calc(scale,x0,.false.,.false.)
       cdrag = dragx(1)
       clift = dragy(1)
       if (nid.eq.0) then
         open(unit=58,file='cdcl.dat',position='append')
         write(58,3) time, cdrag, clift, Qold
3           format(' ',6e17.9)
         close(58)
       endif

      endif
      
      ! write interpolated probles
      if (istep == nsteps) then
         nxm = 1  ! mesh is linear
         call interp_setup(intp_h,0.0,nxm,nelt)
         nint = 0
         if (nid.eq.0) then
            nint = INTP_NMAX
            open (225, file = 'probe_positions.plt', status = 'old')
            do i = 1,nint
               read(225,*)xint(i),yint(i) 
            enddo
            close(225)
            call cfill(zint,ZCINT,size(zint))
         endif
         iffpts = .true.   ! dummy call to find points
         call interp_nfld(intvx,vx,1,xint,yint,zint,nint,
     $                    iwk,rwk,INTP_NMAX,iffpts,intp_h)
         iffpts = .false.
         call interp_nfld(intvx,vx,1,xint,yint,zint,nint,
     $                    iwk,rwk,INTP_NMAX,iffpts,intp_h)

         iffpts = .true.   ! dummy call to find points
         call interp_nfld(intvy,vy,1,xint,yint,zint,nint,
     $                    iwk,rwk,INTP_NMAX,iffpts,intp_h)
         iffpts = .false.
         call interp_nfld(intvy,vy,1,xint,yint,zint,nint,
     $                    iwk,rwk,INTP_NMAX,iffpts,intp_h)

         if (nid.eq.0) then
           open(unit=60,file='probe_values.dat')
           do i=1,INTP_NMAX
             write(60,3) xint(i),yint(i),intvx(i)
           enddo
           do i=1,INTP_NMAX
             write(60,3) xint(i),yint(i),intvy(i)
           enddo
           close(60)
         endif
         
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'JETVAR'
      
      real height, conpi,Amplt,jetwidth,smthdt,tempx,coefA
      height = 5.0
      conpi  = PI
      jetwidth = 10.0/180.0*conpi

      !if (nid.eq.0) then
      !   write(*,*)Qtime,Q1
      !endif
      
      if (x < -1.0) then
      ux = (1.-y)*(1.+y)
      uy = 0.0
      uz = 0.0
      elseif (y > 0.0) then
      theta = atan2(y,x)
      Amplt = Qold*conpi/(2.0*jetwidth*0.5*0.5)*
     $  cos(conpi/jetwidth*(theta-1.5*conpi))
      ux = Amplt*x
      uy = Amplt*y
      uz = 0.0
      elseif (y<0.0) then
      theta = atan2(y,x)
      Amplt = -1.0*Qold*conpi/(2.0*jetwidth*0.5*0.5)*
     $  cos(conpi/jetwidth*(theta-1.5*conpi))
      ux = Amplt*x
      uy = Amplt*y
      uz = 0.0
      endif
          
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      ux = 1.0
      uy = 0.0
      uz = 0.0

      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat   ! This routine to modify element vertices
      include 'SIZE'      ! _before_ mesh is generated, which 
      include 'TOTAL'     ! guarantees GLL mapping of mesh.

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2   ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      include 'ZPER'  ! for nelx,nely,nelz

      do iel=1,nelv
      do ifc=1,2*ndim
         id_face = bc(5,ifc,iel,1)
         if (id_face.eq.1) then
            cbc(ifc,iel,1) = 'v  '
         elseif (id_face.eq.2) then
            cbc(ifc,iel,1) = 'O  '
         elseif (id_face.eq.3) then
            cbc(ifc,iel,1) = 'W  '
         elseif (id_face.eq.4) then
            cbc(ifc,iel,1) = 'v  '
         endif
      enddo
      enddo

      param(66) = 0
      param(67) = 0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine set_obj  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'

      integer e,f,eg

      nobj = 1
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F'
         hcode( 2,ii) = 'F'
         hcode( 3,ii) = 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj

      if (maxobj.lt.nobj) call exitti('increase maxobj in SIZE$',nobj)

      nxyz  = nx1*ny1*nz1
      nface = 2*ndim

      do e=1,nelv
      if (abs(ym1(1,1,1,e)) < 1.2) then
      do f=1,nface
         if (cbc(f,e,1).eq.'W  ') then
            iobj  = 1
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               eg  = lglel(e)
               object(iobj,mem,1) = eg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,eg,e,nid,' OBJ'
c   1          format(6i9,a4)

            endif
         endif
      enddo
      endif
      enddo

c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine estimate_strouhal

      include 'SIZE'
      include 'TOTAL'

      real tlast,vlast,tcurr,vcurr,t0,t1
      save tlast,vlast,tcurr,vcurr,t0,t1
      data tlast,vlast,tcurr,vcurr,t0,t1 / 6*0 /

      integer e,eg,eg0,e0

      eg0 = 622          ! Identify element/processor in wake
      mid = gllnid(eg0)
      e0  = gllel (eg0)

      st  = 0

      if (nid.eq.mid) then

         tlast = tcurr
         vlast = vcurr

         tcurr = time
         vcurr = vy (1,ny1,1,e0)

         xcurr = xm1(1,ny1,1,e0)
         ycurr = ym1(1,ny1,1,e0)

         write(6,2) istep,time,vcurr,xcurr,ycurr
    2    format(i9,1p4e13.5,' vcurr')

         if (vlast.gt.0.and.vcurr.le.0) then ! zero crossing w/ negative slope
            t0  = t1
            t1  = tlast + (tcurr-tlast)*(vlast-0)/(vlast-vcurr)
            per = t1-t0
            if (per.gt.0) st = 1./per
         endif
      endif

      st = glmax(st,1)

      n  = nx1*ny1*nz1*nelv
      ux = glamax(vx,n)
      uy = glamax(vy,n)

      if (nid.eq.0.and.st.gt.0) write(6,1) istep,time,st,ux,uy
    1 format(i5,1p4e12.4,' Strouhal')

      return
      end
c-----------------------------------------------------------------------
c
c automatically added by makenek
      subroutine usrsetvert(glo_num,nel,nx,ny,nz) ! to modify glo_num
      integer*8 glo_num(1)
      return
      end
